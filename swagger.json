{
  "openapi": "3.1.0",
  "x-stoplight": {
    "id": "9sdggoazdtu74"
  },
  "info": {
    "title": "swagger",
    "version": "1.0",
    "description": "Documentation for the NodeJS SOLID Project's API",
    "summary": "Documentation for the NodeJS SOLID Project's API"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/users/{user_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "user_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get User Info by User ID",
        "tags": [],
        "responses": {
          "200": {
            "description": "User Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "User Not Found"
          }
        },
        "operationId": "get-users-userId",
        "description": "Retrieve the information of the user with the matching user ID."
      }
    },
    "/user": {
      "post": {
        "summary": "Create New User",
        "operationId": "post-user",
        "responses": {
          "400": {
            "description": "Missing Required Information or email already exists"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "email"
                ]
              },
              "examples": {}
            }
          },
          "description": "Post the necessary fields for the API to create a new user."
        },
        "description": "Create a new user."
      }
    },
    "/users/{user_id}/admin": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "user_id",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Turn User into an Admin",
        "tags": [],
        "responses": {
          "200": {
            "description": "User Not Found"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "patch-users-user_id-admin"
      }
    },
    "/users": {
      "get": {
        "summary": "Get All Users",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Not Found or user must be an admin"
          }
        },
        "operationId": "get-users",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "user_id",
            "description": "Current logged in user id"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "title": "User",
        "type": "object",
        "description": "",
        "examples": [
          {
            "id": 142,
            "firstName": "Alice",
            "lastName": "Smith",
            "email": "alice.smith@gmail.com",
            "dateOfBirth": "1997-10-31",
            "emailVerified": true,
            "signUpDate": "2019-08-24"
          }
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the given user."
          },
          "name": {
            "type": "string"
          },
          "admin": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "description": "The date that the user was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date",
            "description": "The date that the user was created."
          }
        },
        "required": [
          "id",
          "name",
          "admin",
          "email"
        ]
      }
    }
  }
}